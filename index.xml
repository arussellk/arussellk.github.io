<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rk</title><link>https://arussellk.github.io/</link><description>Recent content on rk</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://arussellk.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Arithmetic, Geometric, and Harmonic means</title><link>https://arussellk.github.io/posts/means/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/posts/means/</guid><description>An arithmetic mean is the value \(a\) such that:
$$ x_1+x_2+\cdots+x_n = \underbrace{a+a+\cdots+a}_{n} $$
A geometric mean is the value \(g\) such that:
$$ x_1 \times x_2 \times \cdots \times x_n = \underbrace{g \times g \times \cdots \times g}_{n} $$
A harmonic mean is the value \(h\) such that:
$$ \frac{1}{x_1}+\frac{1}{x_2}+\cdots+\frac{1}{x_n}= \underbrace{\frac{1}{h}+\frac{1}{h}+\cdots+\frac{1}{h}}_{n} $$
Deriving the standard formulas Arithmetic mean:
$$ \begin{aligned} \underbrace{a+a+\cdots+a}_{n} &amp;amp;= x_1+x_2+\cdots+x_n \\ na &amp;amp;= x_1+x_2+\cdots+x_n \\ a &amp;amp;= \frac{x_1+x_2+\cdots+x_n}{n} \end{aligned} $$</description></item><item><title>Asymptotic Computational Complexity</title><link>https://arussellk.github.io/posts/asymptotic-computational-complexity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/posts/asymptotic-computational-complexity/</guid><description>Since asymtotic complexity describes membership in a set, I wish the preferred notation was \(f(n) \in O(T(n))\) but when talking about asymptotic complexity it is typically written \(f(n)=O(T(n))\). (Interestingly, the German and French Wikipedia articles on Big O notation use \(\in\).)
Let&amp;rsquo;s say we determine that our algorithm takes \(T(n)\) time to run. We might write something like:
\[ T(n) = 5n^2 + 2n \log n + 3n + C \]</description></item><item><title>Covariance and Contravariance</title><link>https://arussellk.github.io/posts/covariance-contravariance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/posts/covariance-contravariance/</guid><description>Covariance and contravariance are properties of code substitution; they describe what you can and can&amp;rsquo;t do if you want to replace some code (e.g., a function call) with some other code (e.g., a different function call) in a type-safe way.
I initially found the concept of covariance and contravariance to be difficult to grasp. This post starts with types and slowly builds to a practical example of covariance and contravariance in a way that will hopefully help you understand it when needed.</description></item><item><title>Time handling for purchase transactions</title><link>https://arussellk.github.io/posts/timezones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/posts/timezones/</guid><description>Advice commonly found on the internet for how to program with timezones is some version of:
Only store UTC datetimes in your database. (e.g., 2022-01-08T10:45:00.000Z.) Convert the UTC datetime to the user&amp;rsquo;s timezone for display. (e.g., 2022-01-08T10:45:00.000Z -&amp;gt; 2022-01-08T03:45:00-07:00.) This advice is good for keeping track of a single point in time (e.g., when does the meeting start), but sometimes working with timezones is slightly more complicated. The purpose of this post is to explain a situation that I encountered where it took some extra effort to convert the UTC datetime from the database to the appropriate timezone for display.</description></item></channel></rss>