<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rk</title><link>https://arussellk.github.io/</link><description>Recent content on rk</description><generator>Hugo</generator><language>en</language><atom:link href="https://arussellk.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Arithmetic, Geometric, and Harmonic means</title><link>https://arussellk.github.io/posts/means/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/posts/means/</guid><description>&lt;p&gt;An arithmetic mean is the value \(a\) such that:&lt;/p&gt;
&lt;p&gt;$$
x_1+x_2+\cdots+x_n =
\underbrace{a+a+\cdots+a}_{n}
$$&lt;/p&gt;
&lt;p&gt;A geometric mean is the value \(g\) such that:&lt;/p&gt;
&lt;p&gt;$$
x_1 \times x_2 \times \cdots \times x_n =
\underbrace{g \times g \times \cdots \times g}_{n}
$$&lt;/p&gt;
&lt;p&gt;A harmonic mean is the value \(h\) such that:&lt;/p&gt;
&lt;p&gt;$$
\frac{1}{x_1}+\frac{1}{x_2}+\cdots+\frac{1}{x_n}=
\underbrace{\frac{1}{h}+\frac{1}{h}+\cdots+\frac{1}{h}}_{n}
$$&lt;/p&gt;
&lt;h3 id="deriving-the-standard-formulas"&gt;Deriving the standard formulas&lt;/h3&gt;
&lt;p&gt;Arithmetic mean:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\underbrace{a+a+\cdots+a}_{n} &amp;amp;=
x_1+x_2+\cdots+x_n \\
na &amp;amp;= x_1+x_2+\cdots+x_n \\
a &amp;amp;= \frac{x_1+x_2+\cdots+x_n}{n}
\end{aligned}
$$&lt;/p&gt;</description></item><item><title>Asymptotic Computational Complexity</title><link>https://arussellk.github.io/posts/asymptotic-computational-complexity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/posts/asymptotic-computational-complexity/</guid><description>&lt;p&gt;Since asymtotic complexity describes membership in a set,
I wish the preferred notation was \(f(n) \in O(T(n))\)
but when talking about asymptotic complexity
it is typically written \(f(n)=O(T(n))\).
(Interestingly, the
&lt;a href="https://de.wikipedia.org/wiki/Landau-Symbole#Definition"&gt;German&lt;/a&gt;
and
&lt;a href="https://fr.wikipedia.org/wiki/Comparaison_asymptotique#La_famille_de_notations_de_Landau_O.2C_o.2C_.CE.A9.2C_.CF.89.2C_.CE.98.2C_.C3.95"&gt;French&lt;/a&gt;
Wikipedia articles on Big O notation use \(\in\).)&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we determine that our algorithm takes \(T(n)\) time to run.
We might write something like:&lt;/p&gt;
&lt;p&gt;\[
T(n) = 5n^2 + 2n \log n + 3n + C
\]&lt;/p&gt;
&lt;p&gt;Then we might want to compare it to some \(f(n)\) using Big O notation like
\(O(f(n))\). We&amp;rsquo;d write something like this:&lt;/p&gt;</description></item><item><title>Biscuits</title><link>https://arussellk.github.io/recipes/biscuits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/recipes/biscuits/</guid><description>&lt;p&gt;Ingredients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2c flour&lt;/li&gt;
&lt;li&gt;1 tbsp baking powder&lt;/li&gt;
&lt;li&gt;1/4 tsp baking soda&lt;/li&gt;
&lt;li&gt;1/2 tsp salt&lt;/li&gt;
&lt;li&gt;6 tbsp butter&lt;/li&gt;
&lt;li&gt;1c buttermilk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Directions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Combine dry ingredients&lt;/li&gt;
&lt;li&gt;Cut in butter, use pastry cutter until butter is about pea-sized&lt;/li&gt;
&lt;li&gt;Add buttermilk, stirring until barely combined&lt;/li&gt;
&lt;li&gt;Knead on floured counter 10-ish times&lt;/li&gt;
&lt;li&gt;Roll to 1/2&amp;quot; and cut biscuits&lt;/li&gt;
&lt;li&gt;Bake at 450F for 10-12 min&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Butternut Squash Soup</title><link>https://arussellk.github.io/recipes/butternut-squash-soup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/recipes/butternut-squash-soup/</guid><description>&lt;p&gt;Ingredients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 butternut squash&lt;/li&gt;
&lt;li&gt;1 large yellow onion&lt;/li&gt;
&lt;li&gt;vegetable stock (or water)&lt;/li&gt;
&lt;li&gt;tomato (fresh, paste, or canned; about 15oz canned or a few tbsp paste)&lt;/li&gt;
&lt;li&gt;1 bay leaf&lt;/li&gt;
&lt;li&gt;(optional) 1/4 to 1 package cream cheese, to taste&lt;/li&gt;
&lt;li&gt;seasonings: salt, black pepper, herbs (rosemary, thyme, generic italian),
garlic powder, onion powder, paprika (small amount), chili powder (small
amount)&lt;/li&gt;
&lt;li&gt;alternate: omit cream cheese, use brown sugar, cinnamon, nutmeg, etc. as
seasonings instead&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Directions:&lt;/p&gt;</description></item><item><title>Cornbread</title><link>https://arussellk.github.io/recipes/cornbread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/recipes/cornbread/</guid><description>&lt;p&gt;Ingredients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1c flour&lt;/li&gt;
&lt;li&gt;1c cornmeal&lt;/li&gt;
&lt;li&gt;2/3c sugar&lt;/li&gt;
&lt;li&gt;1 tsp salt&lt;/li&gt;
&lt;li&gt;3 1/2 tsp baking powder&lt;/li&gt;
&lt;li&gt;1 egg&lt;/li&gt;
&lt;li&gt;1c milk&lt;/li&gt;
&lt;li&gt;1/3 c oil&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bake 20-25min at 400F in greased 9&amp;quot; round&lt;/p&gt;</description></item><item><title>Covariance and Contravariance</title><link>https://arussellk.github.io/posts/covariance-contravariance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/posts/covariance-contravariance/</guid><description>&lt;p&gt;Covariance and contravariance are properties of code substitution;
they describe what you can and can&amp;rsquo;t do if you want to replace some code
(e.g., a function call)
with some other code
(e.g., a different function call)
in a type-safe way.&lt;/p&gt;
&lt;p&gt;I initially found the concept of covariance and contravariance to be difficult
to grasp.
This post starts with types and slowly builds to a practical example of
covariance and contravariance in a way that will hopefully help you understand
it when needed.&lt;/p&gt;</description></item><item><title>Enchiladas</title><link>https://arussellk.github.io/recipes/enchiladas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/recipes/enchiladas/</guid><description>&lt;p&gt;Ingredients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 medium yellow onion&lt;/li&gt;
&lt;li&gt;1 bell pepper&lt;/li&gt;
&lt;li&gt;1 can refried beans&lt;/li&gt;
&lt;li&gt;1 can corn, whole kernel, drained&lt;/li&gt;
&lt;li&gt;sauce (any color, a 15oz can works)&lt;/li&gt;
&lt;li&gt;8 tortillas&lt;/li&gt;
&lt;li&gt;cheese (cheddar/jack blend)&lt;/li&gt;
&lt;li&gt;(optional) chicken, steak, pork, or other meat for filling&lt;/li&gt;
&lt;li&gt;(optional) cilantro, lime, avocado, or diced tomato for garnish&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Variations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;green enchilada sauce, half of a shredded+sauted red cabbage for filling,
omit bell pepper, omit corn&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Directions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Thinly slice onion and pepper; season with cumin, chili powder, salt and
saute on high heat to get char. Aim for fajita filling.&lt;/li&gt;
&lt;li&gt;(optional) Season and cook meat filling.&lt;/li&gt;
&lt;li&gt;Grease 9&amp;quot;x13&amp;quot; pan with high sides to prevent tortillas from sticking.&lt;/li&gt;
&lt;li&gt;Fill (f) tortillas along the middle with beans, corn, onion, pepper, meat,
and cheese. Roll shut without folding the ends. Place in greased pan, seam
down.
&lt;pre tabindex="0"&gt;&lt;code&gt; ___ _
 / f \ |\|
| f | -&amp;gt; |||
 \_f_/ |/|
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Pour sauce over tortillas. Use fork or spatula to get sauce between
tortillas and down the sides of the pan.&lt;/li&gt;
&lt;li&gt;(optional) Top with additional cheese, remaining filling, pepitas, etc.&lt;/li&gt;
&lt;li&gt;Bake at 400F for approx. 30 min. Done when hot and bubbly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: During prep, reference Scotchmo from Wasteland 2 by saying &amp;ldquo;Corn? I don&amp;rsquo;t
remember eating any corn.&amp;rdquo; as often as possible.&lt;/p&gt;</description></item><item><title>Exhaustive Switch</title><link>https://arussellk.github.io/typescript/exhaustive-switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/typescript/exhaustive-switch/</guid><description>&lt;p&gt;Sometimes it is useful to have a compile-time check to make sure that all cases of a union are
represented in code.&lt;/p&gt;
&lt;p&gt;If the code in question is at a function boundary with a return type, you can get a compile-time
check, but the error message is rather unclear.
We can do better than this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-ts" data-lang="ts"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;type&lt;/span&gt; &lt;span style="color:#1f2328"&gt;Foo&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span style="color:#0550ae"&gt;|&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span style="color:#0550ae"&gt;|&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;const&lt;/span&gt; &lt;span style="color:#1f2328"&gt;isSpecial&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;foo&lt;/span&gt;: &lt;span style="color:#cf222e"&gt;Foo&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#0550ae"&gt;:&lt;/span&gt; &lt;span style="color:#cf222e"&gt;boolean&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#1f2328"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#57606a"&gt;// ~~~~~~~ Function lacks ending return statement and return type does not include &amp;#39;undefined&amp;#39;.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;&lt;/span&gt; &lt;span style="color:#cf222e"&gt;switch&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;foo&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt; &lt;span style="color:#1f2328"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#cf222e"&gt;case&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style="color:#0550ae"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;console&lt;/span&gt;&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;&lt;span style="color:#1f2328"&gt;log&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#0a3069"&gt;&amp;#39;got a&amp;#39;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#cf222e"&gt;return&lt;/span&gt; &lt;span style="color:#cf222e"&gt;true&lt;/span&gt;&lt;span style="color:#1f2328"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#cf222e"&gt;case&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style="color:#0550ae"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;console&lt;/span&gt;&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;&lt;span style="color:#1f2328"&gt;log&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#0a3069"&gt;&amp;#39;got b&amp;#39;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#cf222e"&gt;return&lt;/span&gt; &lt;span style="color:#cf222e"&gt;false&lt;/span&gt;&lt;span style="color:#1f2328"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the code in question does not return a value, you will not get a compile-time error.
This is bad because a future developer can unintentionally miss that they should modify this code
when adding a new &lt;code&gt;Foo&lt;/code&gt;:&lt;/p&gt;</description></item><item><title>Nominal Types</title><link>https://arussellk.github.io/typescript/nominal-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/typescript/nominal-types/</guid><description>&lt;p&gt;TypeScript uses structural subtyping.
This means that any type that fits the shape of a different type is compatible.
When using nominal types, on the other hand, two types are considered distinct and incompatible types
even if they have the same underlying representation.&lt;/p&gt;
&lt;p&gt;Here is a reasonably readable and usable way to have a form of nominal types in TypeScript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-ts" data-lang="ts"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;type&lt;/span&gt; &lt;span style="color:#1f2328"&gt;FooId&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&lt;/span&gt; &lt;span style="color:#cf222e"&gt;string&lt;/span&gt; &lt;span style="color:#0550ae"&gt;&amp;amp;&lt;/span&gt; &lt;span style="color:#1f2328"&gt;{&lt;/span&gt; &lt;span style="color:#1f2328"&gt;__tag&lt;/span&gt;&lt;span style="color:#0550ae"&gt;:&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#39;FooId&amp;#39;&lt;/span&gt; &lt;span style="color:#1f2328"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;type&lt;/span&gt; &lt;span style="color:#1f2328"&gt;BarId&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&lt;/span&gt; &lt;span style="color:#cf222e"&gt;string&lt;/span&gt; &lt;span style="color:#0550ae"&gt;&amp;amp;&lt;/span&gt; &lt;span style="color:#1f2328"&gt;{&lt;/span&gt; &lt;span style="color:#1f2328"&gt;__tag&lt;/span&gt;&lt;span style="color:#0550ae"&gt;:&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#39;BarId&amp;#39;&lt;/span&gt; &lt;span style="color:#1f2328"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;const&lt;/span&gt; &lt;span style="color:#1f2328"&gt;isFooId&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;fooId&lt;/span&gt;: &lt;span style="color:#cf222e"&gt;string&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#0550ae"&gt;:&lt;/span&gt; &lt;span style="color:#1f2328"&gt;fooId&lt;/span&gt; &lt;span style="color:#cf222e"&gt;is&lt;/span&gt; &lt;span style="color:#1f2328"&gt;FooId&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#0a3069"&gt;/^[0-9a-f]{8}$/&lt;/span&gt;&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;&lt;span style="color:#1f2328"&gt;test&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;fooId&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;const&lt;/span&gt; &lt;span style="color:#1f2328"&gt;isBarId&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;barId&lt;/span&gt;: &lt;span style="color:#cf222e"&gt;string&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#0550ae"&gt;:&lt;/span&gt; &lt;span style="color:#1f2328"&gt;barId&lt;/span&gt; &lt;span style="color:#cf222e"&gt;is&lt;/span&gt; &lt;span style="color:#1f2328"&gt;BarId&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#1f2328"&gt;barId&lt;/span&gt;&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;&lt;span style="color:#1f2328"&gt;startsWith&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#0a3069"&gt;&amp;#39;BAR_&amp;#39;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;const&lt;/span&gt; &lt;span style="color:#1f2328"&gt;process&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;fooId&lt;/span&gt;: &lt;span style="color:#cf222e"&gt;FooId&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt; &lt;span style="color:#1f2328"&gt;barId&lt;/span&gt;: &lt;span style="color:#cf222e"&gt;BarId&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#1f2328"&gt;{&lt;/span&gt; &lt;span style="color:#57606a"&gt;/* ... */&lt;/span&gt; &lt;span style="color:#1f2328"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;process&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#0a3069"&gt;&amp;#39;asdf&amp;#39;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#39;fdsa&amp;#39;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt; &lt;span style="color:#57606a"&gt;// Error
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;const&lt;/span&gt; &lt;span style="color:#1f2328"&gt;maybeFooId&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#39;deadbeef&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;const&lt;/span&gt; &lt;span style="color:#1f2328"&gt;maybeBarId&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#39;BAR_bar&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;if&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;isFooId&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;maybeFooId&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt; &lt;span style="color:#0550ae"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#1f2328"&gt;isBarId&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;maybeBarId&lt;/span&gt;&lt;span style="color:#1f2328"&gt;))&lt;/span&gt; &lt;span style="color:#1f2328"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;process&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;maybeBarId&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt; &lt;span style="color:#1f2328"&gt;maybeFooId&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt; &lt;span style="color:#57606a"&gt;// Error
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;process&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;maybeFooId&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt; &lt;span style="color:#1f2328"&gt;maybeBarId&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Pasta Carbonara</title><link>https://arussellk.github.io/recipes/pasta-carbonara/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/recipes/pasta-carbonara/</guid><description>&lt;p&gt;Ingredients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 lb uncooked fettuccine&lt;/li&gt;
&lt;li&gt;1/2 lb bacon&lt;/li&gt;
&lt;li&gt;1 small yellow onion&lt;/li&gt;
&lt;li&gt;4 cloves garlic&lt;/li&gt;
&lt;li&gt;3 eggs&lt;/li&gt;
&lt;li&gt;3/4 c parmesan&lt;/li&gt;
&lt;li&gt;1/4 c cream&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Directions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Chop and cook bacon. Remove bacon from pan, keep oil in pan.&lt;/li&gt;
&lt;li&gt;Saute diced onion in bacon oil. For last 30s-1min, add minced garlic. Remove
from heat.&lt;/li&gt;
&lt;li&gt;Combine eggs, cream, parmesan, salt, and lots of black pepper.&lt;/li&gt;
&lt;li&gt;Cook pasta and drain.&lt;/li&gt;
&lt;li&gt;Immediately after draining pasta, put back in pot.&lt;/li&gt;
&lt;li&gt;While stirring the pasta, pour in the egg mixture and cooked onion.
(Stirring keeps the egg from scrambling.)&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Savoiardi</title><link>https://arussellk.github.io/recipes/savoiardi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/recipes/savoiardi/</guid><description>&lt;p&gt;Ingredients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;70g egg white (about 2 large eggs)&lt;/li&gt;
&lt;li&gt;45g yolk (just over 2 yolks)&lt;/li&gt;
&lt;li&gt;62g sugar (granulated)&lt;/li&gt;
&lt;li&gt;62g flour&lt;/li&gt;
&lt;li&gt;dash salt&lt;/li&gt;
&lt;li&gt;lemon zest&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Room temp eggs work best.&lt;/p&gt;
&lt;p&gt;Directions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Beat egg whites with sugar and salt until very stiff peaks&lt;/li&gt;
&lt;li&gt;Fold in egg yolks&lt;/li&gt;
&lt;li&gt;Fold in flour&lt;/li&gt;
&lt;li&gt;Pipe onto parchment&lt;/li&gt;
&lt;li&gt;Bake at 390F for 5-7 min&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>String Union Runtime Validation and Iteration</title><link>https://arussellk.github.io/typescript/string-union/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/typescript/string-union/</guid><description>&lt;p&gt;TypeScript types are removed by the compiler while producing JavaScript.
This is fine much of the time within your system, but sometimes you need to validate user input or
requests from external systems.
One way to have both runtime validation and compile time types is to derive a string union type from
an array.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-ts" data-lang="ts"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;const&lt;/span&gt; &lt;span style="color:#1f2328"&gt;foos&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&lt;/span&gt; &lt;span style="color:#1f2328"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0a3069"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0a3069"&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;]&lt;/span&gt; &lt;span style="color:#cf222e"&gt;as&lt;/span&gt; &lt;span style="color:#cf222e"&gt;const&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;type&lt;/span&gt; &lt;span style="color:#1f2328"&gt;Foo&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&lt;/span&gt; &lt;span style="color:#cf222e"&gt;typeof&lt;/span&gt; &lt;span style="color:#1f2328"&gt;foos&lt;/span&gt;&lt;span style="color:#1f2328"&gt;[&lt;/span&gt;&lt;span style="color:#cf222e"&gt;number&lt;/span&gt;&lt;span style="color:#1f2328"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;const&lt;/span&gt; &lt;span style="color:#1f2328"&gt;isFoo&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;x&lt;/span&gt;: &lt;span style="color:#cf222e"&gt;string&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#0550ae"&gt;:&lt;/span&gt; &lt;span style="color:#1f2328"&gt;x&lt;/span&gt; &lt;span style="color:#cf222e"&gt;is&lt;/span&gt; &lt;span style="color:#1f2328"&gt;Foo&lt;/span&gt; &lt;span style="color:#0550ae"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#1f2328"&gt;foos&lt;/span&gt;&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;&lt;span style="color:#1f2328"&gt;includes&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;x&lt;/span&gt; &lt;span style="color:#cf222e"&gt;as&lt;/span&gt; &lt;span style="color:#1f2328"&gt;Foo&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;for&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#cf222e"&gt;const&lt;/span&gt; &lt;span style="color:#1f2328"&gt;foo&lt;/span&gt; &lt;span style="color:#cf222e"&gt;of&lt;/span&gt; &lt;span style="color:#1f2328"&gt;foos&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt; &lt;span style="color:#1f2328"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;console&lt;/span&gt;&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;&lt;span style="color:#1f2328"&gt;log&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;foo&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Time handling for purchase transactions</title><link>https://arussellk.github.io/posts/timezones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/posts/timezones/</guid><description>&lt;p&gt;Advice commonly found on the internet for how to program with timezones is some
version of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Only store UTC datetimes in your database. (e.g.,
&lt;code&gt;2022-01-08T10:45:00.000Z&lt;/code&gt;.)&lt;/li&gt;
&lt;li&gt;Convert the UTC datetime to the user&amp;rsquo;s timezone for display. (e.g.,
&lt;code&gt;2022-01-08T10:45:00.000Z -&amp;gt; 2022-01-08T03:45:00-07:00&lt;/code&gt;.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This advice is good for keeping track of a single point in time (e.g., when
does the meeting start), but sometimes working with timezones is slightly more
complicated.
The purpose of this post is to explain a situation that I encountered where it
took some extra effort to convert the UTC datetime from the database to the
appropriate timezone for display.&lt;/p&gt;</description></item><item><title>Update with two tables</title><link>https://arussellk.github.io/postgresql/update-with-two-tables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/postgresql/update-with-two-tables/</guid><description>&lt;p&gt;Sometimes it is useful to update one table based on associated data found in a second table.
It is easy to accidentally affect all rows because the update syntax does not have the
&lt;code&gt;JOIN ... USING (some_id)&lt;/code&gt; phrase that you would usually use to restrict rows by id.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;-- Often not what you intend!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;-- Affects all rows because the where clause evaluates to true.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;&lt;/span&gt;&lt;span style="color:#cf222e"&gt;update&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;foo&lt;span style="color:#fff"&gt; &lt;/span&gt;f&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#cf222e"&gt;set&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;is_active&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;=&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;false&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#cf222e"&gt;from&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;bar&lt;span style="color:#fff"&gt; &lt;/span&gt;b&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#cf222e"&gt;where&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;b&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;val&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;=&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0a3069"&gt;&amp;#39;target&amp;#39;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;;&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#57606a"&gt;-- Affects rows when both where conditions evaluate to true,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;-- which is only the foo associated with &amp;#39;target&amp;#39; in this db.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;&lt;/span&gt;&lt;span style="color:#cf222e"&gt;update&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;foo&lt;span style="color:#fff"&gt; &lt;/span&gt;f&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#cf222e"&gt;set&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;is_active&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;=&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;false&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#cf222e"&gt;from&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;bar&lt;span style="color:#fff"&gt; &lt;/span&gt;b&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#cf222e"&gt;where&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;b&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;foo_id&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;=&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;f&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;foo_id&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#cf222e"&gt;and&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;b&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;val&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;=&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0a3069"&gt;&amp;#39;target&amp;#39;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;;&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Full example:&lt;/p&gt;</description></item><item><title>Upsert with ON CONFLICT ... DO UPDATE</title><link>https://arussellk.github.io/postgresql/onconflict/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/postgresql/onconflict/</guid><description>&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;create&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;table&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;if&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;not&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;exists&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;foo&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;foo_id&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#6639ba"&gt;serial&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;primary&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;key&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;col&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#6639ba"&gt;varchar&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#0550ae"&gt;50&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;);&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#cf222e"&gt;insert&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;into&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;foo&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;foo_id&lt;span style="color:#1f2328"&gt;,&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;col&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#cf222e"&gt;values&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#0550ae"&gt;1&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0a3069"&gt;&amp;#39;insert&amp;#39;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#cf222e"&gt;on&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;conflict&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;foo_id&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;do&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;update&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;set&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;col&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;=&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0a3069"&gt;&amp;#39;upsert&amp;#39;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;;&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item></channel></rss>