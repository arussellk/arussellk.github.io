<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rk</title><link>https://arussellk.github.io/</link><description>Recent content on rk</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://arussellk.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Arithmetic, Geometric, and Harmonic means</title><link>https://arussellk.github.io/posts/means/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/posts/means/</guid><description>An arithmetic mean is the value \(a\) such that:
$$ x_1+x_2+\cdots+x_n = \underbrace{a+a+\cdots+a}_{n} $$
A geometric mean is the value \(g\) such that:
$$ x_1 \times x_2 \times \cdots \times x_n = \underbrace{g \times g \times \cdots \times g}_{n} $$
A harmonic mean is the value \(h\) such that:
$$ \frac{1}{x_1}+\frac{1}{x_2}+\cdots+\frac{1}{x_n}= \underbrace{\frac{1}{h}+\frac{1}{h}+\cdots+\frac{1}{h}}_{n} $$
Deriving the standard formulas Arithmetic mean:
$$ \begin{aligned} \underbrace{a+a+\cdots+a}_{n} &amp;amp;= x_1+x_2+\cdots+x_n \\ na &amp;amp;= x_1+x_2+\cdots+x_n \\ a &amp;amp;= \frac{x_1+x_2+\cdots+x_n}{n} \end{aligned} $$</description></item><item><title>Asymptotic Computational Complexity</title><link>https://arussellk.github.io/posts/asymptotic-computational-complexity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/posts/asymptotic-computational-complexity/</guid><description>Since asymtotic complexity describes membership in a set, I wish the preferred notation was \(f(n) \in O(T(n))\) but when talking about asymptotic complexity it is typically written \(f(n)=O(T(n))\). (Interestingly, the German and French Wikipedia articles on Big O notation use \(\in\).)
Let&amp;rsquo;s say we determine that our algorithm takes \(T(n)\) time to run. We might write something like:
\[ T(n) = 5n^2 + 2n \log n + 3n + C \]</description></item><item><title>Biscuits</title><link>https://arussellk.github.io/recipes/tiramisu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/recipes/tiramisu/</guid><description>Ingredients:
2c flour 1 tbsp baking powder 1/4 tsp baking soda 1/2 tsp salt 6 tbsp butter 1c buttermilk Directions:
Combine dry ingredients Cut in butter, use pastry cutter until butter is about pea-sized Add buttermilk, stirring until barely combined Knead on floured counter 10-ish times Roll to 1/2&amp;quot; and cut biscuits Bake at 450F for 10-12 min</description></item><item><title>Butternut Squash Soup</title><link>https://arussellk.github.io/recipes/butternut-squash-soup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/recipes/butternut-squash-soup/</guid><description>Ingredients:
1 butternut squash 1 large yellow onion vegetable stock (or water) tomato (paste or canned) 1 bay leaf 1 package cream cheese seasonings: salt, black pepper, herbs (rosemary, thyme, generic italian), garlic powder, onion powder, paprika (small amount), chili powder (small amount) alternate: omit cream cheese, season with brown sugar, cinnamon, nutmeg, etc. Directions:
Dice and saute onion in large soup pot Add cubed and peeled squash and cook for a few minutes Add stock or water until covered Add tomato, seasonings, and bay leaf Cover and simmer on low for 30-45 mins (the squash should be soft when done) Remove bay leaf Add cream cheese Blend with immersion blender until smooth Season to taste (I usually end up adding a bit more salt and chili powder at the end)</description></item><item><title>Cornbread</title><link>https://arussellk.github.io/recipes/cornbread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/recipes/cornbread/</guid><description>Ingredients:
1c flour 1c cornmeal 2/3c sugar 1 tsp salt 3 1/2 tsp baking powder 1 egg 1c milk 1/3 c oil Bake 20-25min at 400F in greased 9&amp;quot; round</description></item><item><title>Covariance and Contravariance</title><link>https://arussellk.github.io/posts/covariance-contravariance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/posts/covariance-contravariance/</guid><description>Covariance and contravariance are properties of code substitution; they describe what you can and can&amp;rsquo;t do if you want to replace some code (e.g., a function call) with some other code (e.g., a different function call) in a type-safe way.
I initially found the concept of covariance and contravariance to be difficult to grasp. This post starts with types and slowly builds to a practical example of covariance and contravariance in a way that will hopefully help you understand it when needed.</description></item><item><title>Enchiladas</title><link>https://arussellk.github.io/recipes/enchiladas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/recipes/enchiladas/</guid><description>Ingredients:
1 medium yellow onion 1 bell pepper 1 can refried beans 1 can corn, whole kernel, drained sauce (any color, a 15oz can works) 8 tortillas cheese (cheddar/jack blend) (optional) chicken, steak, pork, or other meat for filling (optional) cilantro, lime, avocado, or diced tomato for garnish Directions:
Thinly slice onion and pepper; season with cumin, chili powder, salt and saute on high heat to get char. Aim for fajita filling.</description></item><item><title>Exhaustive Switch</title><link>https://arussellk.github.io/typescript/exhaustive-switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/typescript/exhaustive-switch/</guid><description>type Foo = &amp;#39;a&amp;#39; | &amp;#39;b&amp;#39;; const isSpecial = (foo: Foo): boolean =&amp;gt; { switch (foo) { case &amp;#39;a&amp;#39;: return true; } const exhaustiveCheck: &amp;#39;exhaustiveCheck&amp;#39; = foo; throw Error(`unhandled Foo ${exhaustiveCheck}`); };</description></item><item><title>Nominal Types</title><link>https://arussellk.github.io/typescript/nominal-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/typescript/nominal-types/</guid><description>type FooId = string &amp;amp; { __tag: &amp;#39;FooId&amp;#39; } type BarId = string &amp;amp; { __tag: &amp;#39;BarId&amp;#39; } const isFooId = (fooId: string): fooId is FooId =&amp;gt; /^[0-9a-f]{8}$/.test(fooId) const isBarId = (barId: string): barId is BarId =&amp;gt; barId.startsWith(&amp;#39;BAR_&amp;#39;) const process = (fooId: FooId, barId: BarId) =&amp;gt; { /* ... */ } process(&amp;#39;asdf&amp;#39;, &amp;#39;fdsa&amp;#39;) // Error const maybeFooId = &amp;#39;deadbeef&amp;#39; const maybeBarId = &amp;#39;BAR_bar&amp;#39; if (isFooId(maybeFooId) &amp;amp;&amp;amp; isBarId(maybeBarId)) { process(maybeBarId, maybeFooId) // Error process(maybeFooId, maybeBarId) }</description></item><item><title>Savoiardi</title><link>https://arussellk.github.io/recipes/savoiardi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/recipes/savoiardi/</guid><description>Ingredients:
70g egg white (about 2 large eggs) 45g yolk (just over 2 yolks) 62g sugar (granulated) 62g flour dash salt lemon zest Room temp eggs work best.
Directions:
Beat egg whites with sugar and salt until very stiff peaks Fold in egg yolks Fold in flour Pipe onto parchment Bake at 390F for 5-7 min</description></item><item><title>String Union Runtime Validation and Iteration</title><link>https://arussellk.github.io/typescript/string-union/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/typescript/string-union/</guid><description>const foos = [ &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, ] as const type Foo = typeof foos[number] const isFoo = (x: string): x is Foo =&amp;gt; foos.includes(x as Foo) for (const foo of foos) { console.log(foo) }</description></item><item><title>Time handling for purchase transactions</title><link>https://arussellk.github.io/posts/timezones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/posts/timezones/</guid><description>Advice commonly found on the internet for how to program with timezones is some version of:
Only store UTC datetimes in your database. (e.g., 2022-01-08T10:45:00.000Z.) Convert the UTC datetime to the user&amp;rsquo;s timezone for display. (e.g., 2022-01-08T10:45:00.000Z -&amp;gt; 2022-01-08T03:45:00-07:00.) This advice is good for keeping track of a single point in time (e.g., when does the meeting start), but sometimes working with timezones is slightly more complicated. The purpose of this post is to explain a situation that I encountered where it took some extra effort to convert the UTC datetime from the database to the appropriate timezone for display.</description></item></channel></rss>