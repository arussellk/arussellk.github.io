I"¹
<p>The concept of covariance and contravariance can be difficult to grasp or remember. This is how I remember it.</p>

<h2 id="types">Types</h2>

<p>Here is a type that has a name and age:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ name, age }
</code></pre></div></div>

<p>Here is a type that has an x, y, and z:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ x, y, z }
</code></pre></div></div>

<h2 id="subtypes">Subtypes</h2>

<p>More complex types are subtypes of simpler types. This means that some type B is a subtype of A:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>B &lt; A
</code></pre></div></div>

<p>Or, using the object notation from before:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ x, y, z } &lt; { x, y } &lt; { x } &lt; { }
</code></pre></div></div>

<h2 id="subtype-example">Subtype example</h2>

<p>Time for code!</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var in: { x, y }
var out: { x, y } = foo(in)
print(out.x)
print(out.y)
</code></pre></div></div>

<p>We start with a variable <code class="highlighter-rouge">in</code>, which is a type that has an <code class="highlighter-rouge">x</code> and a <code class="highlighter-rouge">y</code>. We pass <code class="highlighter-rouge">in</code> into <code class="highlighter-rouge">foo</code> and get some result that happens to have the same type. Then we do some stuff with <code class="highlighter-rouge">out</code>.</p>

<p><code class="highlighter-rouge">foo</code> might look like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fun foo(in: { x, y }):
  print(in.x)
  print(in.y)
  return { in.x+1, in.y+1 }
</code></pre></div></div>

<p><code class="highlighter-rouge">foo</code> demands that it is given something with <code class="highlighter-rouge">x</code> and <code class="highlighter-rouge">y</code> and promises to return something else that has <code class="highlighter-rouge">x</code> and <code class="highlighter-rouge">y</code>.</p>

<p>Can we change the type of <code class="highlighter-rouge">in</code>? Or the return type of <code class="highlighter-rouge">foo</code>? Sure! You can always pass in a subtype or return a subtype.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fun foo(in: { x, y }):
  print(in.x)
  print(in.y)
  return { in.x+1, in.y+1, a }

var in: { x, y, z }
var out: { x, y } = foo(in)
print(out.x)
print(out.y)
</code></pre></div></div>

<h2 id="covariancecontravariance-example">Covariance/Contravariance Example</h2>
:ET