<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Typescript on rk</title><link>https://arussellk.github.io/typescript/</link><description>Recent content in Typescript on rk</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://arussellk.github.io/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>Exhaustive Switch</title><link>https://arussellk.github.io/typescript/exhaustive-switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/typescript/exhaustive-switch/</guid><description>type Foo = &amp;#39;a&amp;#39; | &amp;#39;b&amp;#39;; const isSpecial = (foo: Foo): boolean =&amp;gt; { switch (foo) { case &amp;#39;a&amp;#39;: return true; } const exhaustiveCheck: &amp;#39;exhaustiveCheck&amp;#39; = foo; throw Error(`unhandled Foo ${exhaustiveCheck}`); };</description></item><item><title>Nominal Types</title><link>https://arussellk.github.io/typescript/nominal-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/typescript/nominal-types/</guid><description>type FooId = string &amp;amp; { __tag: &amp;#39;FooId&amp;#39; } type BarId = string &amp;amp; { __tag: &amp;#39;BarId&amp;#39; } const isFooId = (fooId: string): fooId is FooId =&amp;gt; /^[0-9a-f]{8}$/.test(fooId) const isBarId = (barId: string): barId is BarId =&amp;gt; barId.startsWith(&amp;#39;BAR_&amp;#39;) const process = (fooId: FooId, barId: BarId) =&amp;gt; { /* ... */ } process(&amp;#39;asdf&amp;#39;, &amp;#39;fdsa&amp;#39;) // Error const maybeFooId = &amp;#39;deadbeef&amp;#39; const maybeBarId = &amp;#39;BAR_bar&amp;#39; if (isFooId(maybeFooId) &amp;amp;&amp;amp; isBarId(maybeBarId)) { process(maybeBarId, maybeFooId) // Error process(maybeFooId, maybeBarId) }</description></item><item><title>String Union Runtime Validation and Iteration</title><link>https://arussellk.github.io/typescript/string-union/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arussellk.github.io/typescript/string-union/</guid><description>const foos = [ &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, ] as const type Foo = typeof foos[number] const isFoo = (x: string): x is Foo =&amp;gt; foos.includes(x as Foo) for (const foo of foos) { console.log(foo) }</description></item></channel></rss>